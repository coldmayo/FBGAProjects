/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     DATA_WIDTH = DATA_WIDTH
     CAPTURE_DEPTH = CAPTURE_DEPTH
     BASE_ADDR = BASE_ADDR
     NONCE = NONCE
*/
module wave_capture_10 (
    input clk,
    input rst,
    input [65:0] regIn,
    output reg [32:0] regOut,
    input [31:0] data
  );
  
  localparam DATA_WIDTH = 6'h20;
  localparam CAPTURE_DEPTH = 9'h100;
  localparam BASE_ADDR = 32'hfffffff0;
  localparam NONCE = 1'h0;
  
  
  localparam VERSION = 32'h00000002;
  
  localparam SUB_SECTIONS = 1'h1;
  
  localparam IDLE_state = 2'd0;
  localparam ARMED_state = 2'd1;
  localparam FIRED_state = 2'd2;
  localparam CAPTURED_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  reg [7:0] M_raddr_d, M_raddr_q = 1'h0;
  reg [7:0] M_waddr_d, M_waddr_q = 1'h0;
  reg [31:0] M_data_old_d, M_data_old_q = 1'h0;
  reg [127:0] M_trigger_type_d, M_trigger_type_q = 1'h0;
  reg [4:0] M_trigger_index_d, M_trigger_index_q = 1'h0;
  reg [0:0] M_sub_idx_d, M_sub_idx_q = 1'h0;
  
  wire [32-1:0] M_ram_read_data;
  reg [8-1:0] M_ram_waddr;
  reg [32-1:0] M_ram_write_data;
  reg [1-1:0] M_ram_write_en;
  reg [8-1:0] M_ram_raddr;
  simple_dual_ram_11 #(.SIZE(6'h20), .DEPTH(9'h100)) ram (
    .rclk(clk),
    .wclk(clk),
    .waddr(M_ram_waddr),
    .write_data(M_ram_write_data),
    .write_en(M_ram_write_en),
    .raddr(M_ram_raddr),
    .read_data(M_ram_read_data)
  );
  
  integer i;
  
  reg triggered;
  
  always @* begin
    M_state_d = M_state_q;
    M_trigger_index_d = M_trigger_index_q;
    M_data_old_d = M_data_old_q;
    M_trigger_type_d = M_trigger_type_q;
    M_raddr_d = M_raddr_q;
    M_sub_idx_d = M_sub_idx_q;
    M_waddr_d = M_waddr_q;
    
    M_ram_waddr = M_waddr_q;
    M_ram_raddr = M_raddr_q;
    M_ram_write_data = data;
    M_ram_write_en = 1'h0;
    regOut[0+31-:32] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    regOut[32+0-:1] = 1'h0;
    M_data_old_d = data;
    
    case (M_state_q)
      ARMED_state: begin
        triggered = 1'h1;
        for (i = 1'h0; i < 6'h20; i = i + 1) begin
          triggered = triggered & ((M_trigger_type_q[(i)*4+0+0-:1] && M_data_old_q[(i)*1+0-:1] == 1'h0 && data[(i)*1+0-:1] == 1'h1) || (M_trigger_type_q[(i)*4+1+0-:1] && M_data_old_q[(i)*1+0-:1] == 1'h1 && data[(i)*1+0-:1] == 1'h0) || (M_trigger_type_q[(i)*4+2+0-:1] && data[(i)*1+0-:1] == 1'h0) || (M_trigger_type_q[(i)*4+3+0-:1] && data[(i)*1+0-:1] == 1'h1) || M_trigger_type_q[(i)*4+3-:4] == 4'h0);
        end
        if (triggered) begin
          M_ram_write_en = 1'h1;
          M_state_d = FIRED_state;
          M_waddr_d = M_waddr_q + 1'h1;
        end
      end
      FIRED_state: begin
        M_waddr_d = M_waddr_q + 1'h1;
        M_ram_write_en = 1'h1;
        if (M_waddr_q == 10'h0ff) begin
          M_state_d = CAPTURED_state;
        end
      end
    endcase
    if (regIn[0+0-:1]) begin
      if (regIn[1+0-:1]) begin
        
        case (regIn[2+31-:32])
          32'hfffffff0: begin
            if (regIn[34+31-:32] == 32'h00000001) begin
              M_state_d = ARMED_state;
              M_waddr_d = 1'h0;
              M_raddr_d = 1'h0;
            end else begin
              if (regIn[34+31-:32] == 32'h00000002) begin
                M_state_d = FIRED_state;
                M_waddr_d = 1'h0;
                M_raddr_d = 1'h0;
              end
            end
          end
          33'h0fffffff4: begin
            M_trigger_index_d = regIn[34+0+4-:5];
          end
          33'h0fffffff5: begin
            M_trigger_type_d[(M_trigger_index_q)*4+3-:4] = regIn[34+0+3-:4];
          end
        endcase
      end else begin
        regOut[32+0-:1] = 1'h1;
        
        case (regIn[2+31-:32])
          32'hfffffff0: begin
            regOut[0+31-:32] = {M_raddr_q == 9'h100, M_state_q == CAPTURED_state, M_state_q == FIRED_state, M_state_q == ARMED_state};
          end
          33'h0fffffff1: begin
            if (1'h0) begin
              regOut[0+31-:32] = M_ram_read_data[(M_sub_idx_q * 6'h20)*1+31-:32];
              M_sub_idx_d = M_sub_idx_q + 1'h1;
              if (M_sub_idx_q == 2'h0) begin
                M_sub_idx_d = 1'h0;
                M_raddr_d = M_raddr_q + 1'h1;
              end
            end else begin
              regOut[0+31-:32] = M_ram_read_data;
              M_raddr_d = M_raddr_q + 1'h1;
            end
          end
          33'h0fffffff2: begin
            regOut[0+31-:32] = 6'h20;
          end
          33'h0fffffff3: begin
            regOut[0+31-:32] = 9'h100;
          end
          33'h0fffffff4: begin
            regOut[0+31-:32] = M_trigger_index_q;
          end
          33'h0fffffff5: begin
            regOut[0+31-:32] = M_trigger_type_q[(M_trigger_index_q)*4+3-:4];
          end
          33'h0fffffffe: begin
            regOut[0+31-:32] = 1'h0;
          end
          33'h0ffffffff: begin
            regOut[0+31-:32] = 32'h00000002;
          end
          default: begin
            regOut[32+0-:1] = 1'h0;
          end
        endcase
      end
    end
  end
  
  always @(posedge clk) begin
    M_raddr_q <= M_raddr_d;
    M_waddr_q <= M_waddr_d;
    M_data_old_q <= M_data_old_d;
    M_trigger_type_q <= M_trigger_type_d;
    M_trigger_index_q <= M_trigger_index_d;
    M_sub_idx_q <= M_sub_idx_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
