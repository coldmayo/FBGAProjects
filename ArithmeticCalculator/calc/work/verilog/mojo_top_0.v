/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [23:0] result;
  
  reg [23:0] result_shown;
  
  reg [23:0] num;
  
  reg [23:0] num2;
  
  wire [7-1:0] M_lut_segs;
  reg [4-1:0] M_lut_value;
  digit_lut_1 lut (
    .value(M_lut_value),
    .segs(M_lut_segs)
  );
  
  wire [24-1:0] M_conv_better;
  reg [24-1:0] M_conv_value;
  convert_2 conv (
    .value(M_conv_value),
    .better(M_conv_better)
  );
  
  reg [23:0] val1;
  
  reg [23:0] val2;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [8-1:0] M_seg_display_seg;
  wire [4-1:0] M_seg_display_sel;
  reg [96-1:0] M_seg_display_values;
  reg [4-1:0] M_seg_display_decimal;
  multi_seg_display_4 seg_display (
    .clk(clk),
    .rst(rst),
    .values(M_seg_display_values),
    .decimal(M_seg_display_decimal),
    .seg(M_seg_display_seg),
    .sel(M_seg_display_sel)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    val1 = io_dip[8+7-:8];
    val2 = io_dip[0+7-:8];
    M_conv_value = val1;
    val1 = M_conv_better;
    if (val2 == 1'h1) begin
      val2 = 1'h0;
    end
    if (val2 == 2'h2) begin
      val2 = 1'h1;
    end
    if (val2 == 3'h4) begin
      val2 = 2'h2;
    end
    if (val2 == 4'h8) begin
      val2 = 2'h3;
    end
    if (val2 == 5'h10) begin
      val2 = 3'h4;
    end
    if (val2 == 6'h20) begin
      val2 = 3'h5;
    end
    if (val2 == 7'h40) begin
      val2 = 3'h6;
    end
    if (val2 == 8'h80) begin
      val2 = 3'h7;
    end
    result_shown = val1 + val2;
    result = io_dip[8+7-:8] + io_dip[0+7-:8];
    if (io_dip[16+0+0-:1]) begin
      result_shown = val1 - val2;
      result = io_dip[8+7-:8] - io_dip[0+7-:8];
    end
    if (io_dip[16+1+0-:1]) begin
      result_shown = val1 * val2;
      result = io_dip[8+7-:8] * io_dip[0+7-:8];
    end
    if (io_dip[16+2+0-:1]) begin
      result_shown = val1 / val2;
      result = io_dip[8+7-:8] / io_dip[0+7-:8];
    end
    io_led = {result[16+7-:8], result[8+7-:8], result[0+7-:8]};
    M_lut_value = 1'h0;
    M_seg_display_values = 96'h000000000000000000000000;
    M_seg_display_decimal = 4'h0;
    if (result_shown < 4'ha) begin
      M_seg_display_values = {24'h000000, 24'h000000, 24'h000000, result_shown};
      M_seg_display_decimal = 4'h0;
    end
    if (result_shown > 4'h9) begin
      num = result_shown / 4'ha;
      num2 = result_shown - (num * 4'ha);
      M_seg_display_values = {24'h000000, 24'h000000, num, num2};
      M_seg_display_decimal = 4'h0;
    end
    io_seg = ~M_seg_display_seg;
    io_sel = ~M_seg_display_sel;
  end
endmodule
