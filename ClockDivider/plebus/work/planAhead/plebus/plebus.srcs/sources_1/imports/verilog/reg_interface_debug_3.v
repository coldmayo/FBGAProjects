/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     CLK_FREQ = 50000000
     DATA_WIDTH = 32
     CAPTURE_DEPTH = 256
     NONCE = 0
*/
module reg_interface_debug_3 (
    input clk,
    input rst,
    input [7:0] rx_data,
    input new_rx_data,
    output reg [7:0] tx_data,
    output reg new_tx_data,
    input tx_busy,
    output reg [65:0] regOut,
    input [32:0] regIn,
    input [31:0] debug
  );
  
  localparam CLK_FREQ = 26'h2faf080;
  localparam DATA_WIDTH = 6'h20;
  localparam CAPTURE_DEPTH = 9'h100;
  localparam NONCE = 1'h0;
  
  
  localparam BASE_ADDR = 32'hfffffff0;
  
  wire [8-1:0] M_reg_interface_tx_data;
  wire [1-1:0] M_reg_interface_new_tx_data;
  wire [66-1:0] M_reg_interface_regOut;
  reg [8-1:0] M_reg_interface_rx_data;
  reg [1-1:0] M_reg_interface_new_rx_data;
  reg [1-1:0] M_reg_interface_tx_busy;
  reg [33-1:0] M_reg_interface_regIn;
  reg_interface_9 reg_interface (
    .clk(clk),
    .rst(rst),
    .rx_data(M_reg_interface_rx_data),
    .new_rx_data(M_reg_interface_new_rx_data),
    .tx_busy(M_reg_interface_tx_busy),
    .regIn(M_reg_interface_regIn),
    .tx_data(M_reg_interface_tx_data),
    .new_tx_data(M_reg_interface_new_tx_data),
    .regOut(M_reg_interface_regOut)
  );
  wire [33-1:0] M_wave_capture_regOut;
  reg [66-1:0] M_wave_capture_regIn;
  reg [32-1:0] M_wave_capture_data;
  wave_capture_10 wave_capture (
    .clk(clk),
    .rst(rst),
    .regIn(M_wave_capture_regIn),
    .data(M_wave_capture_data),
    .regOut(M_wave_capture_regOut)
  );
  
  reg [65:0] regOutMod;
  
  always @* begin
    M_wave_capture_regIn = M_reg_interface_regOut;
    M_wave_capture_data = debug;
    regOutMod = M_reg_interface_regOut;
    if (regOutMod[2+31-:32] >= 32'hfffffff0) begin
      regOutMod[0+0-:1] = 1'h0;
    end
    M_reg_interface_rx_data = rx_data;
    M_reg_interface_new_rx_data = new_rx_data;
    tx_data = M_reg_interface_tx_data;
    new_tx_data = M_reg_interface_new_tx_data;
    M_reg_interface_tx_busy = tx_busy;
    regOut = regOutMod;
    M_reg_interface_regIn = M_wave_capture_regOut[32+0-:1] ? M_wave_capture_regOut : regIn;
  end
endmodule
